


function fetch_decisions(searchOptions){
	var searchType = null;
	var url; 
	var ajax_data = {};

	if (searchOptions.ri_num) {
		searchType = "by_reg_id";
		url = api_url + ":3000/decisions";
		ajax_data = {"ri_num" : searchOptions.ri_num };

	}
	if (searchOptions.cuid) {
		searchType = "by_cuid";
		url = api_url + ":3000/decisions";
		ajax_data = {"ingredient" : searchOptions.cuid };

	}	
	if (searchOptions.sm_uid) {
		searchType = "by_sm_uid";
		url = api_url + ":3000/mywork/" + searchOptions.sm_uid + "?page[offset]=" + searchOptions.page + "&action_code=" + searchOptions.filter;
	}	
	//need to handle errors


	$.ajax({
	  type: "get",
	  url: url,
      crossDomain: true,
      data: ajax_data, 
      beforeSend: function(xhr) {
		//clear decisions
		//$("#current_decision").hide();
		$(".decision_table").empty();
		$('.graph_div').remove();
		//$("#current_decision").css("display","block"); //show current decision
		//$("#past_decisions").css("display","block"); //show current decision
      	$("#current_decision").append("<div class='loading'>Loading Current Decisions...</div>");
      	$("#past_decisions").append("<div class='loading'>Loading Past Decisions...</div>");

      	if(searchOptions.sm_uid){//its being invoked from myWork page
      		$(searchOptions.tables).empty();
	      	$("#my_decisions").append("<div class='loading'>Loading Current Decisions...</div>");     		
      	}
    	


      },

      success: function (data){

		$("#current_decision .loading").remove();
		$("#past_decisions .loading").remove();

      	if(searchOptions.sm_uid){//its being invoked from myWork page
	      	$("#my_decisions .loading").remove();     		
      	}		
    	
		decisions_data = data;

		//TODO Re-examine whether or not it really makes sense to use the same decision setup for 
		//multiple of pages - its getting complicated. 

		if(searchOptions.ri_num){
		 	//setup current Decisions
		 	displayDecision(decisions_data, "prod_current", searchOptions.tables[0],searchOptions);

		 	//setup decision history
		 	displayDecision(decisions_data, "prod_past", searchOptions.tables[1],searchOptions);
		};

		if(searchOptions.cuid){
		 	//setup current Decisions
		 	displayDecision(decisions_data, "ai_current", searchOptions.tables[0],searchOptions);

		};		

		if(searchOptions.sm_uid){
		 	//setup current Decision
		 	displayDecision(decisions_data, "mywork", searchOptions.tables[0],searchOptions);

		};		
 	
      }

	});

}


function displayDecision(tDecisions, filterText, tTbl,searchOptions){
	//sets up a whole decisions table for a particular filter, such as current
	$(tTbl).empty();
	var last_dec_seq = null;

	$.each( tDecisions.data, function( index, decision ) {
		//check for duplicate decision, and skip
		//TODO: this assumes duplicates appear immediately after one another, need
		//to handle more robustly
		if(last_dec_seq == decision.dec_seq){
				return; //skip this iteration
		}
		last_dec_seq = decision.dec_seq;
		switch(filterText) {
	    case "prod_current":
	    	if (decision.dstty_type == 'PENDING'){
	    		//TODO: need to filter by dstty_seq for types 1 - 4
 				$("#current_decision").css("display","inline-block");//show current div
 				buildTable();
 				decisionGraph(tTbl, decision);
	    	}

	        break;
	    case "prod_past":
	    	if (decision.dstty_type != 'PENDING'){
 				//$("#past_decisions").css("display","inline-block");
 				buildTable();
	    	}

	        break;	
	    case "ai_current":
	    	if (decision.dstty_type == 'PENDING'){
 				$("#current_decision").css("display","inline-block");
 				buildTable();
	    	}

	        break;		        
	    case "mywork":

 				$("#my_decisions").css("display","inline-block");
 				buildTable();

	        break;	                
	    default:
	        return;
	    }

	    function buildTable(){

		    var detailPane = $("<tr><td colspan='8' class='detail_pane'><table class='receipt_table'></table></td></tr>");
		    if (index == 0){
			    var row = "<tr class='headrow'><th>Dec#</th><th>Action</th><th>Status</th><th>Division</th><th>Person</th><th>FFS Start</th><th>Due Date</th><th></th></tr>"
			    $(tTbl).append(row);
		    }

		    //create a row for each decision 
		    row = $("<tr></tr>");


		    var c1 = $("<td>" + decision.dec_seq + "</td>");
		    var c2 = $("<td>" + decision.adt_action_cd	 + "</td>");

		    var c3 = $("<td>" + decision.dstty_type + "</td>");
		    var c4 = $("<td>" + decision.org_division_name + "/" + decision.org_branch_name + "</td>");
		    var c5 = $("<td>" + "xxxxx" + "</td>");
		    var c6 = $("<td>" + oracleDate(decision.ffs_start_dt) + "</td>");
		    var c7 = $("<td>" + oracleDate(decision.dec_calc_due_dt) + "</td>");
		    //var c8 = $("<td><a>Receipts</a></td>");
		    //$(c8).find("a").attr("onclick","javascript: showDetail(this);");

		    //add cells to row detail pane DOM 
		    $(row).append(c1);$(row).append(c2);$(row).append(c3);$(row).append(c4);
		    $(row).append(c5);$(row).append(c6);$(row).append(c7); 
		    //$(row).append(c8);

		    if (filterText == 'mywork') {//click behavior is different depending on where this is
			    $(row).attr("onclick","javascript: window.location='productview/" + decision.ri_num + "';");
		    }
		    else {//for product view or ingredient view
		    	$(row).attr("onclick","javascript: showDetail(this);");
		    }




		    $(tTbl).append(row);
		    $(tTbl).append(detailPane);

		    //Now, set up receipt rows and add to DOM
		    $.each( decision.items, function(index,item){
		    	var iRow = $("<tr><td>" + item.subt_desc + "</td><td>(" + item.pin_punch_dt2 + ")</td><td>S#: " + item.irec_seq + "</td><td> - <a data-sm_uid='" + item.sm_uid + "'>" + item.sm_fname + " " + item.sm_lname + "<a></td></tr>");
		    	$(detailPane).find(".receipt_table").append(iRow);
		    	var anchor = $(iRow).find('a'); 
		    	$(anchor).on('click',function(){
		    		contactDialog(anchor);
		    	});

		    });

	    }

  	});//end decision each loop

  	if(tDecisions.data.length > 0){  	//add a row for pagination if there are decisions
		var pRow = $("<tr><td colspan='7'>Page " +  tDecisions.page + " <a class='pagination_link' id='next_page' onclick='javascript: loadPage(" + (parseInt(tDecisions.page) + 1) + ")'>Next Page</a><a class='pagination_link' id='prev_page' onclick='javascript: loadPage(" + (parseInt(tDecisions.page) - 1) + ")'>Previous Page</a></td></tr>");  	

	  	$(tTbl).append(pRow);
	}
} 

function showDetail(row){

 var detailPane = $($(row).next()[0]).find('.detail_pane')[0];
 $(detailPane).toggle();

}


function decisionGraph(dTable, decision){
	//dTable is the decision table passed from the setup Decision function
	
	$('.graph_div').remove();
	//graph is 800px long
	//1. calculate total days between start and finish
	//2. get the # of pixels per day for this graph
	//3. draw a line the length of 
	var graphContainer = $("<div class='row'><div class='graph_div'></div></div>")[0];

	// Decision Line
	var ffsStartDt = new Date(oracleDate(decision.ffs_start_dt));
	var dueDt = new Date(oracleDate(decision.dec_calc_due_dt));
	var totalDays = dateDiff(ffsStartDt,dueDt);

	var decisionLine = $("<div class='decision_line'>Dec #: " + decision.dec_seq + " - Action Code: " + decision.adt_action_cd + ": " + decision.act_desc.substring(0,50) + "...</div>");
	//Add FFS Start Date , Due date (what about non-PRIA stuff w/out FFS dates?)
	var ffsStartCircle = $("<div class='graph_circle ffs_start_circle'></div>").css("top","-2px");
	var dueDtCircle = $("<div class='graph_circle due_dt_circle'></div>").css("top","-2px").css("left","780px");
	$(graphContainer).find('.graph_div').append(decisionLine);
	$(graphContainer).find('.graph_div').append(ffsStartCircle).append(dueDtCircle);


	//Submission lines - make one per submission
	$.each( decision.items, function(index,item){	

		//figure out start and finish points of the submission
		var subStartDate = new Date(oracleDate(item.pin_punch_dt));
		var subEndDate = new Date(oracleDate(item.deci_calc_due_dt));
		var subStartX = getDateX(totalDays, ffsStartDt, subStartDate); 	
		var subEndX = getDateX(totalDays, ffsStartDt, subEndDate);		
		var subWidth = subEndX - subStartX; 

		var submissionLine = $("<div class='submission_line'>" + item.subt_desc + " - Sub #: " + item.irec_seq + " - " + item.irec_desc.substring(0,25) + "</div>").css("left",subStartX).css("width",subWidth);		
		$(graphContainer).find('.graph_div').append(submissionLine);

		//Do data packages
		$.each (item.data_packages, function(dindex,dp){
			//figure out start and finish points of the data package
			var dpStartDate = new Date(oracleDate(dp.ds_in_dt));
			var dpEndDate = new Date(oracleDate(dp.admin_due_dt));
			var dpStartX = getDateX(totalDays, ffsStartDt, dpStartDate); 	
			var dpEndX = getDateX(totalDays, ffsStartDt, dpEndDate);		
			var dpWidth = dpEndX - dpStartX; 

			var datapackageLine = $("<div class='datapackage_line'>DP: " + dp.dpkg_title + " <br> " + dp.team_desc + " <a data-sm_uid='" + dp.sm_uid + "'>" + dp.sm_fname + " " + dp.sm_lname + "</a></div>").css("left",dpStartX).css("width",dpWidth);	
			$(graphContainer).find('.graph_div').append(datapackageLine);
	    	var anchor = $(datapackageLine).find('a'); 
	    	$(anchor).on('click',function(){
	    		contactDialog(anchor);
	    	});			
		});

	});


	//get first row in section
	$(graphContainer).insertAfter($(dTable).parents(".row").prev());


}

function dateDiff(date1,date2){
	//returns # of dates between two dates
	var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds
	var diffDays = Math.round(Math.abs((date1.getTime() - date2.getTime())/(oneDay)));
	return diffDays;


}

function getDateX(totalDays, decStartDate, eventDate){
	//this function returns the X value of a particular date for the decision graph
	//on this graph the decision start date is 0 and the due date is 800px
	var pixelsPerDay = 800/totalDays;
	//1. figure out the difference in days between the decisionStartDate and eventDate
	//2. set the x value appropriately
	var dateDifference = dateDiff(decStartDate, eventDate);
	var dateX = null;
	if (decStartDate > eventDate){//the event is before the decision start date, probably the initial submission punch date
		dateX = -(pixelsPerDay*dateDifference);
	}
	else{
		dateX = (pixelsPerDay*dateDifference);
	}
	return dateX;

}